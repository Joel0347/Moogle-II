stack new my-project
cd my-project

stack build
stack exec my-project-exe






package.yaml

name: search-engine
version: 0.1.0
dependencies:
  - base >= 4.7 && < 5
  - directory
  - text
  - parsec
  - http-types
  - happstack-server



stack.yaml

resolver: lts-18.0
packages:
  - .
extra-deps: []




Main.hs 

{-# LANGUAGE OverloadedStrings #-}

import Happstack.Server (nullConf, simpleHTTP, ok, dir, path, serveDirectory, Browsing(DisableBrowsing))
import Data.List (nub)
import Indexer (indexDirectory)
import Searcher (searchKeywords)

main :: IO ()
main = do
    index <- indexDirectory "data/documents"
    simpleHTTP nullConf $ msum
        [ dir "static" $ serveDirectory DisableBrowsing [] "static"
        , dir "search" $ path $ \query -> do
            let results = nub (searchKeywords (words query) index)
            ok $ show results
        , serveDirectory DisableBrowsing [] "static"  -- Serve static files from here by default
        ]




Indexer.hs

module Indexer (indexDirectory) where

import System.Directory (listDirectory)
import System.IO (readFile)

-- Leer el contenido de un archivo
readFileContent :: FilePath -> IO String
readFileContent path = readFile path

-- Indexar el contenido de un archivo
indexFile :: FilePath -> IO [(String, FilePath)]
indexFile path = do
    content <- readFileContent path
    let wordsList = words content
    return [(word, path) | word <- wordsList]

-- Indexar todos los archivos en un directorio
indexDirectory :: FilePath -> IO [(String, FilePath)]
indexDirectory dir = do
    files <- listDirectory dir
    indexes <- mapM indexFile files
    return (concat indexes)



Searcher.hs 

module Searcher (searchKeywords) where

import Data.List (isInfixOf)

-- Buscar una palabra clave en el índice
searchKeyword :: String -> [(String, FilePath)] -> [FilePath]
searchKeyword keyword index = [path | (word, path) <- index, keyword `isInfixOf` word]

-- Buscar múltiples palabras clave en el índice
searchKeywords :: [String] -> [(String, FilePath)] -> [FilePath]
searchKeywords keywords index = concatMap (\kw -> searchKeyword kw index) keywords



index.html 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Motor de Búsqueda</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <h1>Motor de Búsqueda</h1>
    <input type="text" id="query" placeholder="Escribe tu búsqueda...">
    <button onclick="search()">Buscar</button>
    <div id="results"></div>
    <script src="js/script.js"></script>
</body>
</html>



css/styles.css 

body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

h1 {
    color: #333;
}

input {
    padding: 8px;
    margin: 10px 0;
    width: 300px;
}

button {
    padding: 8px 16px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}

#results {
    margin-top: 20px;
}



js/script.js 

function search() {
    const query = document.getElementById('query').value;
    fetch(`/search/${query}`)
        .then(response => response.json())
        .then(data => {
            const resultsDiv = document.getElementById('results');
            resultsDiv.innerHTML = '';
            data.forEach(result => {
                const p = document.createElement('p');
                p.textContent = result;
                resultsDiv.appendChild(p);
            });
        })
        .catch(error => console.error('Error:', error));
}
